//-------Comments------
1: HEAD usually refers to a Branch NOT a specific commit
2: (git switch -) Take me to the last version of the branch where I am

//---------------------------------- Git Stash -----------------------------------

All the changes of the working directory, before Add and commit

***	git stash === git stash save
Helps you to save changes that you are not yet ready to commit.

***	git stash list
View all stashes

***	git stash pop  ó  git stash pop stash@{#}
Remove the most recently stashed changes in your stash and re-apply them to your working compy

***	git stash apply  ó  git stash apply stash@{#}
Apply whatevere is sthashed away, without removing it from the stash. This can be useful if you want to apply astashed changes to multiple branches.

***	git stash drop stash@{#}
Delete a particular stash

//---------------------------------- Undoing Changes -----------------------------------

*** git checkout <commit-hash>  ó  git checkout HEAD~1
View a previous commit

We have a couple options:
1. Stay in detached HEAD to examine the contents of the old commit. Poke around, view the files, etc.
2. Leave and go back to whereever you were before -reattach the HEAD. (git switch <branch>  ó  git switch -)
3. Create a new branch and switch to it. You can now make and save changes, since HEAD is no longer detached.

*** git checkout HEAD <file>  ó  git checkout -- <file>
Discarding Changes in that file, reverting back to the HEAD

//---------------------------------- Restore -----------------------------------

*** git restore <file> 
Restore the file to the last commit

*** git restore --source <commit-hash> <file>
Restore the file to a specific commit

 




